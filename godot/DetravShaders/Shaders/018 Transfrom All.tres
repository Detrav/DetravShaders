[gd_resource type="Shader" format=2]

[resource]
code = "//https://docs.godotengine.org/ru/stable/tutorials/shaders/index.html
//https://docs.godotengine.org/ru/stable/tutorials/shaders/shader_reference/canvas_item_shader.html
shader_type canvas_item;

const float PI = 3.14159265359;


mat2 scale2d1(vec2 _scale){
    return mat2(vec2(_scale.x,0.0),
                vec2(0.0,_scale.y));
}

vec2 scale2d2(vec2 point, mat2 matrix, vec2 origin)
{
    point -= vec2(0.5);
    point = matrix * point;
    point += vec2(0.5);
    return point;
}

vec2 scale2d(vec2 point, vec2 scale, vec2 origin)
{
    mat2 matrix = scale2d1( scale);
    return scale2d2(point, matrix,origin);
}

mat2 rotate2d1(float _angle){
    return mat2(vec2(cos(_angle),-sin(_angle)),
                vec2(sin(_angle),cos(_angle)));
}

vec2 rotate2d2(vec2 point, mat2 matrix, vec2 origin)
{
    point -= vec2(0.5);
    point = matrix * point;
    point += vec2(0.5);   
    return point;
}

vec2 rotate2d(vec2 point, float angle, vec2 origin)
{
    mat2 matrix = rotate2d1(angle);
    return rotate2d2(point, matrix, origin);
}

vec2 translate2d(vec2 point, vec2 offset)
{
    return point - offset;
}

float box(in vec2 _st, in vec2 _size){
    _size = vec2(0.5) - _size*0.5;
    vec2 uv = smoothstep(_size,
                        _size+vec2(0.001),
                        _st);
    uv *= smoothstep(_size,
                    _size+vec2(0.001),
                    vec2(1.0)-_st);
    return uv.x*uv.y;
}

float cross1(in vec2 _st, float _size){
    return  box(_st, vec2(_size,_size/4.)) +
            box(_st, vec2(_size/4.,_size));
}

void fragment(){
    vec2 st = UV;
    vec3 color = vec3(0.0);
	
	

    st = translate2d(st, vec2(-0.2, 0.1));
    st = scale2d(st,vec2(sin(TIME)+1.0),vec2(0.5));
    st = rotate2d(st, sin(TIME)*PI, vec2(0.5));
    

    color += vec3(cross1(st,0.2));

    COLOR = vec4(color,1.0);
}
"
